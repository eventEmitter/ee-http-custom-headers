module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { filter: peg$parsefilter, select: peg$parseselect, order: peg$parseorder, value: peg$parsevalue, date: peg$parsedate, function: peg$parsefunction, array: peg$parsearray, comp: peg$parsecomp, access_extended: peg$parseaccess_extended, access_array: peg$parseaccess_array, access_dot: peg$parseaccess_dot, identifier: peg$parseidentifier, selector: peg$parseselector, selector_base: peg$parseselector_base },
        peg$startRuleFunction  = peg$parsefilter,

        peg$c0 = { type: "other", description: "whitespace" },
        peg$c1 = [],
        peg$c2 = "\n",
        peg$c3 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c4 = function() { return ""; },
        peg$c5 = " ",
        peg$c6 = { type: "literal", value: " ", description: "\" \"" },
        peg$c7 = "\t",
        peg$c8 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c9 = peg$FAILED,
        peg$c10 = ".",
        peg$c11 = { type: "literal", value: ".", description: "\".\"" },
        peg$c12 = function(result) { return result; },
        peg$c13 = ",",
        peg$c14 = { type: "literal", value: ",", description: "\",\"" },
        peg$c15 = "*",
        peg$c16 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c17 = "'",
        peg$c18 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c19 = "\"",
        peg$c20 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c21 = "(",
        peg$c22 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c23 = ")",
        peg$c24 = { type: "literal", value: ")", description: "\")\"" },
        peg$c25 = "[",
        peg$c26 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c27 = "]",
        peg$c28 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c29 = function() { return true; },
        peg$c30 = void 0,
        peg$c31 = { type: "other", description: "letter" },
        peg$c32 = /^[A-Z]/i,
        peg$c33 = { type: "class", value: "[A-Z]i", description: "[A-Z]i" },
        peg$c34 = { type: "other", description: "letter or underscore" },
        peg$c35 = /^[A-Z_]/i,
        peg$c36 = { type: "class", value: "[A-Z_]i", description: "[A-Z_]i" },
        peg$c37 = { type: "other", description: "word character" },
        peg$c38 = /^[A-Z0-9_]/i,
        peg$c39 = { type: "class", value: "[A-Z0-9_]i", description: "[A-Z0-9_]i" },
        peg$c40 = { type: "other", description: "a digit" },
        peg$c41 = /^[0-9]/,
        peg$c42 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c43 = { type: "other", description: "identifier" },
        peg$c44 = function(result) { return IntermediateRepresentation.identifier((result.length == 1) ? result[0] : result[0]+result[1].join("")); },
        peg$c45 = function(result) { return IntermediateRepresentation.literal(result); },
        peg$c46 = "null",
        peg$c47 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c48 = { type: "other", description: "boolean" },
        peg$c49 = "true",
        peg$c50 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c51 = "false",
        peg$c52 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c53 = function() { return false; },
        peg$c54 = { type: "other", description: "number" },
        peg$c55 = null,
        peg$c56 = function(integer, remainder) {
            var intPart     = integer;
            return (remainder) ? parseFloat(integer+remainder[0]+remainder[1].join('')) : parseInt(intPart, 10);
        },
        peg$c57 = { type: "other", description: "string" },
        peg$c58 = function(str) { return str[1].join(""); },
        peg$c59 = "\\",
        peg$c60 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c61 = { type: "any", description: "any character" },
        peg$c62 = function(char) { return char.join(""); },
        peg$c63 = { type: "other", description: "date" },
        peg$c64 = "-",
        peg$c65 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c66 = function(year, month, day, time) {
            time = time || [0, 0, 0, 0, 0];

            var   hour  = time[0]
                , min   = time[2]
                , sec   = time[4];

            return IntermediateRepresentation.date(year, month, day, hour, min, sec);
        },
        peg$c67 = function(result) { return parseInt(result.join(""), 10); },
        peg$c68 = /^[1-9]/,
        peg$c69 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c70 = ":",
        peg$c71 = { type: "literal", value: ":", description: "\":\"" },
        peg$c72 = function(nested_select) { return IntermediateRepresentation.access_array(nested_select); },
        peg$c73 = function(name, accesses) { return IntermediateRepresentation.access_dot(name, accesses); },
        peg$c74 = function(wildcard) { return IntermediateRepresentation.access_dot(wildcard); },
        peg$c75 = function(result) { return IntermediateRepresentation.access_extended(result); },
        peg$c76 = function(baseName, accessDot) { return IntermediateRepresentation.selector_base(baseName, accessDot); },
        peg$c77 = { type: "other", description: "selector" },
        peg$c78 = function(result) { return IntermediateRepresentation.selector(result); },
        peg$c79 = function(first, more) { return IntermediateRepresentation.values(argumentsList(first, more)); },
        peg$c80 = { type: "other", description: "array" },
        peg$c81 = function(items) { return IntermediateRepresentation.arr(items); },
        peg$c82 = function(id, params) { return IntermediateRepresentation.func(id, params); },
        peg$c83 = function(single, more) { return IntermediateRepresentation.select(argumentsList(single, more)); },
        peg$c84 = function(alias, agg) { return IntermediateRepresentation.selectItem(alias, agg) },
        peg$c85 = function(single, more) { return IntermediateRepresentation.filter(argumentsList(single, more)); },
        peg$c86 = function(single, more) { return IntermediateRepresentation.order(argumentsList(single, more)); },
        peg$c87 = function(compared, operator, val) { return IntermediateRepresentation.comp(compared, operator, val); },
        peg$c88 = "!=",
        peg$c89 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c90 = ">=",
        peg$c91 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c92 = "<=",
        peg$c93 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c94 = ">",
        peg$c95 = { type: "literal", value: ">", description: "\">\"" },
        peg$c96 = "<",
        peg$c97 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c98 = "like",
        peg$c99 = { type: "literal", value: "like", description: "\"like\"" },
        peg$c100 = function(op) { return op.toUpperCase(); },
        peg$c101 = "=",
        peg$c102 = { type: "literal", value: "=", description: "\"=\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsews() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseblank();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s2 = peg$c2;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseblank();
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s2 = peg$c2;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c4();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }

      return s0;
    }

    function peg$parseblank() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c5;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s0 = peg$c7;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
      }

      return s0;
    }

    function peg$parsedot() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsecomma() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsestar() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsesq() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c17;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }

      return s0;
    }

    function peg$parsedq() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c19;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }

      return s0;
    }

    function peg$parsebracketLeft() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c21;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsebracketRight() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsesquareBracketLeft() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c25;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsesquareBracketRight() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseepsilon() {
      var s0;

      peg$reportedPos = peg$currPos;
      s0 = peg$c29();
      if (s0) {
        s0 = peg$c30;
      } else {
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseletter() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c32.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }

      return s0;
    }

    function peg$parseletter_() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c35.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c38.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c41.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseletter_();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseword();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseword();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c9;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c44(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }

      return s0;
    }

    function peg$parseliteral() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenumber();
        if (s1 === peg$FAILED) {
          s1 = peg$parseboolean();
          if (s1 === peg$FAILED) {
            s1 = peg$parsenull();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c45(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsenull() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c46) {
        s0 = peg$c46;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }

      return s0;
    }

    function peg$parseboolean() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseboolean_true();
      if (s0 === peg$FAILED) {
        s0 = peg$parseboolean_false();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parseboolean_true() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c49) {
        s1 = peg$c49;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c29();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseboolean_false() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c51) {
        s1 = peg$c51;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c53();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedigit();
        }
      } else {
        s1 = peg$c9;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsedot();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsedigit();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsedigit();
            }
          } else {
            s4 = peg$c9;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c9;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c9;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c55;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c56(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsestring_sq();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestring_dq();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c58(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }

      return s0;
    }

    function peg$parsestring_sq() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesq();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestring_sq_char();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestring_sq_char();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesq();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsestring_sq_char() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c59;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesq();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c9;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsesq();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c30;
        } else {
          peg$currPos = s2;
          s2 = peg$c9;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c61); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c9;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c62(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestring_dq() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedq();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestring_dq_char();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestring_dq_char();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedq();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsestring_dq_char() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c59;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedq();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c9;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsedq();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c30;
        } else {
          peg$currPos = s2;
          s2 = peg$c9;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c61); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c9;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c62(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedate() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedate_year();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c64;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedate_pair();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c64;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedate_pair();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsedate_time();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c55;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c66(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c9;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c9;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c9;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c9;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }

      return s0;
    }

    function peg$parsedate_pair() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c41.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c41.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c9;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedate_year() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c68.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c41.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s3 !== peg$FAILED) {
          if (peg$c41.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s4 !== peg$FAILED) {
            if (peg$c41.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c9;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c9;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c9;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedate_time() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedate_pair();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c70;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedate_pair();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c70;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedate_pair();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c9;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c9;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseaccess_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesquareBracketLeft();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselect();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesquareBracketRight();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c72(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseaccess_dot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaccess_dot();
          if (s3 === peg$FAILED) {
            s3 = peg$c55;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c73(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseaccess_wildcard() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestar();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c74(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseaccess_extended() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseaccess_wildcard();
      if (s1 === peg$FAILED) {
        s1 = peg$parseaccess_array();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c75(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseselector_base() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseaccess_dot();
        if (s2 === peg$FAILED) {
          s2 = peg$c55;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c76(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseselector() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseselector_base();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseaccess_extended();
        if (s3 === peg$FAILED) {
          s3 = peg$c55;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c9;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c9;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsearray();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedate();
        if (s1 === peg$FAILED) {
          s1 = peg$parseliteral();
          if (s1 === peg$FAILED) {
            s1 = peg$parsefunction();
            if (s1 === peg$FAILED) {
              s1 = peg$parseselector_base();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsevalues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsevalue();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsecomma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsevalue();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c9;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c9;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsecomma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevalue();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c9;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c9;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c79(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsearray() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesquareBracketLeft();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalues();
        if (s2 === peg$FAILED) {
          s2 = peg$c55;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesquareBracketRight();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c81(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }

      return s0;
    }

    function peg$parsefunction() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebracketLeft();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalues();
          if (s3 === peg$FAILED) {
            s3 = peg$c55;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsebracketRight();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c82(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c9;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseselect() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();
        if (s2 === peg$FAILED) {
          s2 = peg$c55;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselect_item();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseselect_item();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c9;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c9;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseselect_item();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c9;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c9;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 === peg$FAILED) {
                s5 = peg$c55;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c83(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c9;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c9;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseselect_item() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseselector();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecomp_eq();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsefunction();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c9;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c9;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c9;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c9;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c55;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c84(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsefilter() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();
        if (s2 === peg$FAILED) {
          s2 = peg$c55;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomp();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecomp();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c9;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c9;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecomp();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c9;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c9;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 === peg$FAILED) {
                s5 = peg$c55;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c85(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c9;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c9;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseorder() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();
        if (s2 === peg$FAILED) {
          s2 = peg$c55;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseorder_item();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseorder_item();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c9;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c9;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseorder_item();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c9;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c9;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomma();
              if (s5 === peg$FAILED) {
                s5 = peg$c55;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c86(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c9;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c9;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parseorder_item() {
      var s0;

      s0 = peg$parsefunction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseselector_base();
      }

      return s0;
    }

    function peg$parsecomp() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseselector();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomp_op();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalue();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c87(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c9;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsecomp_op() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c88) {
        s1 = peg$c88;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parsecomp_eq();
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c90) {
            s1 = peg$c90;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c92) {
              s1 = peg$c92;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s1 = peg$c94;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c95); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                  s1 = peg$c96;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c97); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c98) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c99); }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c100(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c9;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c9;
      }

      return s0;
    }

    function peg$parsecomp_eq() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c101;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }


      var IntermediateRepresentation = require('./../IntermediateRepresentation');

      var argumentsList = function(first, more){
        var sg = [first];
        for(var i=0; i<more.length; i++){
          sg.push(more[i][1]);
        }
        return sg;
      };


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
